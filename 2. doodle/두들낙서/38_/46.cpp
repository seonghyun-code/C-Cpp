// 논리 연산 && || !
// 비트 연산 &  |  ^ ~
// 비트 논리 연산 + shift 연산

#include <stdio.h>
int main() {
	// 1. 비트 논리 연산
	// 12 = 1100(2), 10 = 1010(2)
	char a = 12, b = 10;
	printf("%d\n", a & b); // 00001000(2) = 8
	printf("%d\n", a | b); // 00001110(2) = 14
	printf("%d\n", a ^ b); // 00000110(2) = 6
	printf("%d\n\n", ~a); // 11110011(2) + 00000001 = 11110100(2) -13
	/*
	00001100의 1의 보수를 구해보자.
	2의 보수 + 00000001
	11110011
	+0000001
	--------
	11110100 : -13
	*/

	// 2. shift 연산
	// 갈 곳이 없는 애는 버리고, 빈 공간은 0으로 채우고!
	// << 왼쪽으로 shift, >> 오른쪽으로 shift
	char c = 22; // 00010110
	printf("%d\n", c << 1); // 00101100(2) = 44
	printf("%d\n", c << 3); // 176
	printf("%d\n", c << 6); // 1408
	printf("%d\n", c >> 1); // 11
	printf("%d\n", c >> 3); // 2
	printf("%d\n", c >> 6); // 0
	// char = -128 ~ 127인데 범위를 넘어가는 이유
	// 자리가 완전히 넘어가버리는 걸 방지하기 위해 자료형이 자동으로 바뀜!
}